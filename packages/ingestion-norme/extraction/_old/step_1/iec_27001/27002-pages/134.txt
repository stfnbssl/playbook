ISO/IEC 27002:2022(E)
b)	 selection, authorization and reuse of well-vetted components, particularly authentication and 
cryptographic components;
c)	
the licence, security and history of external components;
d)	 ensuring that software is maintainable, tracked and originates from proven, reputable sources;
e)	 sufficiently long-term availability of development resources and artefacts.
Where a software package needs to be modified the following points should be considered:
a)	 the risk of built-in controls and integrity processes being compromised;
b)	 whether to obtain the consent of the vendor;
c)	
the possibility of obtaining the required changes from the vendor as standard program updates;
d)	 the impact if the organization becomes responsible for the future maintenance of the software as a 
result of changes;
e)	 compatibility with other software in use.
Other information
A guiding principle is to ensure security-relevant code is invoked when necessary and is tamper-
resistant. Programs installed from compiled binary code also have these properties but only for 
data held within the application. For interpreted languages, the concept only works when the code is 
executed on a server that is otherwise inaccessible by the users and processes that use it, and that its 
data is held in a similarly protected database. For example, the interpreted code can be run on a cloud 
service where access to the code itself requires administrator privileges. Such administrator access 
should be protected by security mechanisms such as just-in-time administration principles and strong 
authentication. If the application owner can access scripts by direct remote access to the server, so in 
principle can an attacker. Webservers should be configured to prevent directory browsing in such cases.
Application code is best designed on the assumption that it is always subject to attack, through error or 
malicious action. In addition, critical applications can be designed to be tolerant of internal faults. For 
example, the output from a complex algorithm can be checked to ensure that it lies within safe bounds 
before the data is used in an application such as a safety or financial critical application. The code that 
performs the boundary checks is simple and therefore much easier to prove correctness.
Some web applications are susceptible to a variety of vulnerabilities that are introduced by poor design 
and coding, such as database injection and cross-site scripting attacks. In these attacks, requests can be 
manipulated to abuse the webserver functionality.
More information on ICT security evaluation can be found in the ISO/IEC 15408 series.
8.29	Security testing in development and acceptance
Control type
Information
security properties
Cybersecurity
concepts
Operational
capabilities
Security domains
#Preventive
#Confidentiality
#Integrity
#Availability
#Identify
#Application_security
#Information_securi­
ty_assurance
#System_and_net­
work_security
#Protection
Control
Security testing processes should be defined and implemented in the development life cycle.
	
﻿
© ISO/IEC 2022 – All rights reserved

﻿
124

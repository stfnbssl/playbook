-- Logbot Starter Catalog â€” PostgreSQL DDL + INSERT scaffolding
-- Generated at 2025-08-20T04:32:19.108153Z

BEGIN;

-- === DDL ================================================================

CREATE TABLE IF NOT EXISTS control (
  canonical_id TEXT PRIMARY KEY,
  objective TEXT NOT NULL,
  statement TEXT NOT NULL,
  type TEXT NOT NULL CHECK (type IN ('process','technical')),
  risk_theme TEXT NOT NULL,
  criticality INT NOT NULL DEFAULT 3
);

CREATE TABLE IF NOT EXISTS control_applicability (
  canonical_id TEXT NOT NULL REFERENCES control(canonical_id) ON DELETE CASCADE,
  roles TEXT[] NOT NULL,
  env TEXT[] NOT NULL,
  lifecycle TEXT[] NOT NULL,
  min_security_level INT NULL,
  conditions JSONB NOT NULL DEFAULT '{}'::jsonb
);

CREATE TABLE IF NOT EXISTS control_param (
  canonical_id TEXT NOT NULL REFERENCES control(canonical_id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  default_value JSONB NULL
);

CREATE TABLE IF NOT EXISTS control_mapping (
  canonical_id TEXT NOT NULL REFERENCES control(canonical_id) ON DELETE CASCADE,
  framework_code TEXT NOT NULL,
  section_path TEXT NOT NULL,
  relation TEXT NOT NULL CHECK (relation IN ('equivalent','broader','narrower','supports'))
);

CREATE TABLE IF NOT EXISTS checklist_item (
  id BIGSERIAL PRIMARY KEY,
  canonical_id TEXT NOT NULL REFERENCES control(canonical_id) ON DELETE CASCADE,
  question TEXT NOT NULL,
  answer_type TEXT NOT NULL CHECK (answer_type IN ('yes/no','evidence','text','select')),
  guidance TEXT NULL,
  evidence_type TEXT[] NULL
);

CREATE TABLE IF NOT EXISTS evidence_type (
  code TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  examples TEXT NULL
);

CREATE TABLE IF NOT EXISTS profile (
  profile_id BIGSERIAL PRIMARY KEY,
  name TEXT UNIQUE NOT NULL,
  version TEXT NOT NULL,
  description TEXT NULL,
  rules JSONB NOT NULL
);

CREATE TABLE IF NOT EXISTS profile_control (
  profile_id BIGINT NOT NULL REFERENCES profile(profile_id) ON DELETE CASCADE,
  canonical_id TEXT NOT NULL REFERENCES control(canonical_id) ON DELETE CASCADE,
  required BOOLEAN NOT NULL DEFAULT FALSE,
  param_values JSONB NULL,
  PRIMARY KEY (profile_id, canonical_id)
);

-- === INSERTS ============================================================


-- Evidence types

INSERT INTO evidence_type(code,name,examples) VALUES ('AccessGatewayConfig','Remote access gateway policy export','JSON/YAML export') ON CONFLICT (code) DO UPDATE SET name=EXCLUDED.name, examples=EXCLUDED.examples;
INSERT INTO evidence_type(code,name,examples) VALUES ('IdPPolicy','Identity Provider/MFA policy','Screenshots or URL') ON CONFLICT (code) DO UPDATE SET name=EXCLUDED.name, examples=EXCLUDED.examples;
INSERT INTO evidence_type(code,name,examples) VALUES ('SessionRecording','PAM/Jump session record','Video/Log reference') ON CONFLICT (code) DO UPDATE SET name=EXCLUDED.name, examples=EXCLUDED.examples;
INSERT INTO evidence_type(code,name,examples) VALUES ('FirewallConfig','Firewall/ACL ruleset export','Config file') ON CONFLICT (code) DO UPDATE SET name=EXCLUDED.name, examples=EXCLUDED.examples;
INSERT INTO evidence_type(code,name,examples) VALUES ('AccessReviewReport','Privileged access review report','PDF/Spreadsheet') ON CONFLICT (code) DO UPDATE SET name=EXCLUDED.name, examples=EXCLUDED.examples;
INSERT INTO evidence_type(code,name,examples) VALUES ('VulnReport','Vulnerability remediation status','CSV/PDF') ON CONFLICT (code) DO UPDATE SET name=EXCLUDED.name, examples=EXCLUDED.examples;
INSERT INTO evidence_type(code,name,examples) VALUES ('SIEMReport','SIEM ingestion/alerts report','Dashboard export') ON CONFLICT (code) DO UPDATE SET name=EXCLUDED.name, examples=EXCLUDED.examples;
INSERT INTO evidence_type(code,name,examples) VALUES ('RestoreTestLog','Backup restore test log','Job log/Report') ON CONFLICT (code) DO UPDATE SET name=EXCLUDED.name, examples=EXCLUDED.examples;
INSERT INTO evidence_type(code,name,examples) VALUES ('VaultPolicy','Secrets vault policy export','JSON') ON CONFLICT (code) DO UPDATE SET name=EXCLUDED.name, examples=EXCLUDED.examples;
INSERT INTO evidence_type(code,name,examples) VALUES ('RotationLog','Secrets rotation log','CSV/Log') ON CONFLICT (code) DO UPDATE SET name=EXCLUDED.name, examples=EXCLUDED.examples;


-- Controls

INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-AC-001','Enforce strong remote administrative access for OT.','Require all remote administrative access to OT networks to traverse a managed jump service that enforces MFA and policy-based authorization.','technical','Access Control',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-AC-001', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-AC-001','mfa_required','Require MFA for remote admin access', 'true'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-AC-001','session_recording_required','Record remote admin sessions', 'true'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-AC-001','IEC 62443-3-3:2013','SR 1.1','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-AC-001','ISO/IEC 27002:2022','A.5.15','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-AC-001','Is all OT remote admin access brokered via a jump service with MFA?','yes/no', NULL, NULL);
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-AC-001','Provide gateway policy export and MFA settings.','evidence', NULL, ARRAY['AccessGatewayConfig','IdPPolicy']);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-AC-002','Ensure unique accountability for privileged users.','Require unique, non-shared administrator accounts with least-privilege and periodic entitlement review for OT systems.','technical','Access Control',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-AC-002', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-AC-002','entitlement_review_days','Days between privileged access reviews', '90'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-AC-002','IEC 62443-3-3:2013','SR 1.2','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-AC-002','ISO/IEC 27002:2022','A.5.18','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-AC-002','Are admin accounts unique and reviewed at least quarterly?','yes/no', NULL, NULL);
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-AC-002','Upload last access review report for OT administrators.','evidence', NULL, ARRAY['AccessReviewReport']);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-AC-003','Control and monitor privileged operations.','Enforce privileged access management (PAM) for OT-critical systems, including checkout/approval for break-glass access and session monitoring.','technical','Access Control',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-AC-003', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-AC-003','pam_required','PAM required for OT critical assets', 'true'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-AC-003','IEC 62443-3-3:2013','SR 2.1','supports');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-AC-003','ISO/IEC 27002:2022','A.5.16','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-AC-003','Is PAM enforced for OT-critical systems?','yes/no', NULL, NULL);
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-AC-003','Provide PAM policy and example session record.','evidence', NULL, ARRAY['PAMPolicy','SessionRecording']);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-AC-004','Protect and rotate service account credentials.','Manage OT service accounts with scoped privileges, vault-stored secrets, and automated rotation.','technical','Access Control',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-AC-004', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-AC-004','secret_rotation_days','Rotation period for service secrets', '60'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-AC-004','IEC 62443-3-3:2013','SR 1.2','supports');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-AC-004','ISO/IEC 27002:2022','A.8.29','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-AC-004','Are service account secrets vaulted and rotated on schedule?','yes/no', NULL, NULL);
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-AC-004','Upload rotation logs or vault policy export.','evidence', NULL, ARRAY['VaultPolicy','RotationLog']);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-AC-005','Limit session exposure.','Implement session timeout, lockout thresholds, and re-authentication for high-risk actions on OT admin interfaces.','technical','Access Control',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-AC-005', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-AC-005','session_timeout_minutes','Idle timeout for OT admin sessions', '15'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-AC-005','IEC 62443-3-3:2013','SR 2.6','supports');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-AC-005','ISO/IEC 27002:2022','A.8.23','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-AC-005','Is idle timeout enabled on OT admin consoles?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-NW-001','Establish robust segmentation for OT.','Implement zone-and-conduit segmentation with deny-by-default ACLs between OT zones and DMZ, allowing only approved industrial protocols and flows.','technical','Network',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-NW-001', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-NW-001','rule_review_days','Days between firewall rule reviews', '90'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-NW-001','IEC 62443-3-3:2013','SR 5.1','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-NW-001','ISO/IEC 27002:2022','A.8.20','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-NW-001','Are inter-zone ACLs deny-by-default with approved allowlists?','yes/no', NULL, NULL);
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-NW-001','Provide firewall export for OTâ†”DMZ conduits.','evidence', NULL, ARRAY['FirewallConfig']);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-NW-002','Broker remote access via DMZ.','Terminate external remote access in a managed DMZ and proxy into OT through controlled conduits only.','technical','Network',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-NW-002', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-NW-002','IEC 62443-3-3:2013','SR 5.2','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-NW-002','ISO/IEC 27002:2022','A.5.23','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-NW-002','Is remote access terminated in DMZ and proxied into OT?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-NW-003','Reduce protocol attack surface.','Allowlist and inspect industrial protocols (e.g., Modbus, Profinet) and block cleartext management protocols in OT.','technical','Network',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-NW-003', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-NW-003','ot_protocols_allowlisted','List of approved OT protocols', NULL);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-NW-003','IEC 62443-3-3:2013','SR 5.2','supports');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-NW-003','ISO/IEC 27002:2022','A.8.20','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-NW-003','Is protocol allowlisting configured on OT firewalls/IDS?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-NW-004','Protect critical zones with constrained flows.','Enforce unidirectional gateways (data diode) or protocol brokers for data egress from safety-critical OT zones.','technical','Network',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-NW-004', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 3, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-NW-004','unidirectional_required','Require unidirectional tech for critical zones', 'true'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-NW-004','IEC 62443-3-3:2013','SR 5.3','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-NW-004','Are unidirectional gateways or brokers deployed for critical zones?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-NW-005','Control changes to network security baselines.','Apply formal change control, rule justification, and periodic recertification for OT firewall/ACL policies.','technical','Network',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-NW-005', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-NW-005','recertification_days','Days between rule recertifications', '180'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-NW-005','ISO/IEC 27002:2022','A.8.9','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-NW-005','Are OT firewall rules recertified on schedule with business justification?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-PM-001','Maintain an OT vulnerability management process.','Maintain an asset-based vulnerability management process for OT, including discovery, risk rating, remediation tracking, and exceptions.','process','Vulnerability',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-PM-001', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-PM-001','scan_frequency_days','Days between OT vuln scans (where safe)', '30'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-PM-001','IEC 62443-3-3:2013','SR 7.6','supports');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-PM-001','ISO/IEC 27002:2022','A.8.8','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-PM-001','Is there an OT vulnerability management register with owners and due dates?','yes/no', NULL, NULL);
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-PM-001','Provide last remediation status report.','evidence', NULL, ARRAY['VulnReport']);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-PM-002','Validate patches in OT safely.','Test and validate patches in a representative OT testbed and deploy within approved maintenance windows with rollback plans.','technical','Vulnerability',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-PM-002', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-PM-002','patch_window_days','Target days to deploy OT patches after validation', '30'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-PM-002','IEC 62443-3-3:2013','SR 2.8','supports');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-PM-002','ISO/IEC 27002:2022','A.8.7','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-PM-002','Are OT patches tested in a lab before deployment?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-PM-003','Apply compensating controls when patching is infeasible.','When vendor support or downtime constraints prevent patching, implement compensating controls such as network isolation, application allowlisting, and brokered remote access.','technical','Vulnerability',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-PM-003', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-PM-003','unpatchable_register','Maintain register of unpatchable assets', 'true'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-PM-003','IEC 62443-3-3:2013','SR 3.1','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-PM-003','Is there a documented compensating control plan for unpatchable assets?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-PM-004','Track vendor advisories affecting OT.','Track vendor security advisories for OT components and assess applicability and risk within defined SLAs.','process','Vulnerability',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-PM-004', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-PM-004','advisory_review_days','Days to review vendor advisories', '7'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-PM-004','ISO/IEC 27002:2022','A.5.36','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-PM-004','Is there a subscription/monitoring for vendor advisories with documented triage?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-LM-001','Collect and centralize OT security logs.','Forward security-relevant logs from OT gateways, servers, and brokers to a central SIEM with constrained connectivity.','technical','Monitoring',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-LM-001', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-LM-001','log_retention_days','Days to retain OT security logs', '180'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-LM-001','IEC 62443-3-3:2013','SR 6.1','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-LM-001','ISO/IEC 27002:2022','A.8.32','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-LM-001','Are OT logs forwarded to a central SIEM?','yes/no', NULL, NULL);
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-LM-001','Provide SIEM ingestion dashboard or sample.','evidence', NULL, ARRAY['SIEMReport']);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-LM-002','Synchronize time for reliable forensics.','Use trustworthy NTP/PTP sources and secure time distribution to ensure timestamp integrity across OT assets and collectors.','technical','Monitoring',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-LM-002', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-LM-002','ntp_stratum_max','Maximum acceptable NTP stratum', '3'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-LM-002','IEC 62443-3-3:2013','SR 6.2','supports');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-LM-002','ISO/IEC 27002:2022','A.8.19','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-LM-002','Is time synchronization enforced and monitored for OT logging components?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-LM-003','Detect OT network threats.','Deploy OT-aware IDS/monitoring to detect anomalous OT protocol activity and policy violations.','technical','Monitoring',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-LM-003', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-LM-003','ids_enabled','Enable OT IDS/monitoring', 'true'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-LM-003','IEC 62443-3-3:2013','SR 6.2','supports');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-LM-003','ISO/IEC 27002:2022','A.8.16','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-LM-003','Is an OT-aware IDS deployed with alerting to SOC?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-LM-004','Protect log integrity and retention.','Protect OT logs against tampering and retain them for the defined period to support investigations and legal holds.','technical','Monitoring',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-LM-004', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-LM-004','writable_window_hours','Max time logs remain modifiable', '0'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-LM-004','ISO/IEC 27002:2022','A.8.33','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-LM-004','Are OT logs write-once or integrity-protected?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-IR-001','Prepare OT-specific incident response.','Maintain OT incident response playbooks including detection, containment, safe-state procedures, recovery, and post-incident review.','process','Incident Response',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-IR-001', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-IR-001','rto_hours','Target Recovery Time Objective for essential OT services', NULL);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-IR-001','NIS2:2022','Art.21(2)(d)','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-IR-001','ISO/IEC 27002:2022','A.5.24','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-IR-001','Do playbooks cover safe-state criteria and safety escalation?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-IR-002','Record remote admin sessions for forensics.','Record and securely store remote administrative session metadata and, where permissible, session content for forensic analysis.','technical','Incident Response',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-IR-002', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], 2, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-IR-002','session_record_retention_days','Retention of session recordings', '90'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-IR-002','IEC 62443-3-3:2013','SR 6.2','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-IR-002','Are admin sessions recorded and retained per policy?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-IR-003','Exercise OT incident response.','Conduct periodic OT-focused incident exercises including external stakeholders and safety functions.','process','Incident Response',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-IR-003', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-IR-003','exercise_frequency_days','Days between OT IR exercises', '180'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-IR-003','ISO/IEC 27002:2022','A.5.30','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-IR-003','Has an OT IR exercise been conducted within the last 6 months?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-BC-001','Back up critical OT configurations securely.','Maintain offline or immutable backups of OT device configurations, engineering workstations, and historian data essential for recovery.','technical','BC/DR',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-BC-001', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-BC-001','backup_frequency_days','Backup frequency for OT configs', '7'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-BC-001','IEC 62443-3-3:2013','SR 7.1','supports');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-BC-001','ISO/IEC 27002:2022','A.5.29','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-BC-001','Are OT configuration backups offline/immutable and recent?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-BC-002','Prove recoverability.','Perform periodic restore tests for critical OT assets and document results and timing versus objectives.','technical','BC/DR',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-BC-002', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-BC-002','restore_test_frequency_days','Days between restore tests', '90'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-BC-002','ISO/IEC 27002:2022','A.5.31','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-BC-002','Provide last OT restore test report/log.','evidence', NULL, ARRAY['RestoreTestLog']);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-BC-003','Protect backups from ransomware and sabotage.','Apply access controls, network isolation, and integrity checks to OT backups to prevent unauthorized alteration or deletion.','technical','BC/DR',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-BC-003', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-BC-003','ISO/IEC 27002:2022','A.8.33','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-BC-003','Are OT backup repositories access-controlled and isolated?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-SC-001','Impose supplier security requirements for IACS.','Define and enforce supplier security requirements aligned to IEC 62443-4-1/-4-2 for components and integration services.','process','Supply Chain',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-SC-001', ARRAY['Manufacturer','SystemIntegrator','AssetOwner'], ARRAY['OT','IT'], ARRAY['Design','Development','Integration','Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SC-001','IEC 62443-4-1:2018','All clauses','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SC-001','ISO/IEC 27002:2022','A.5.22','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-SC-001','Do contracts include IEC 62443-4-1/-4-2 aligned requirements?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-SC-002','Secure third-party remote maintenance.','Ensure contracts and technical controls for remote maintenance enforce brokered access, MFA, monitoring, and session recording.','process','Supply Chain',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-SC-002', ARRAY['AssetOwner','SystemIntegrator'], ARRAY['OT'], ARRAY['Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SC-002','NIS2:2022','Art.21(2)','supports');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SC-002','ISO/IEC 27002:2022','A.5.21','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-SC-002','Do maintenance contracts mandate brokered access with MFA and monitoring?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-SC-003','Consume and verify SBOMs for OT software.','Require SBOMs from suppliers and verify component vulnerabilities and licenses before deployment.','process','Supply Chain',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-SC-003', ARRAY['AssetOwner','SystemIntegrator'], ARRAY['OT','IT'], ARRAY['Integration','Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-SC-003','sbom_format','Accepted SBOM format (SPDX/CycloneDX)', '"CycloneDX"'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SC-003','CRA:2024','Annex I','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-SC-003','Are SBOMs provided and checked before integrating software?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-SC-004','Operate a PSIRT and Coordinated Vulnerability Disclosure (CVD).','Maintain a Product Security Incident Response Team with public CVD policy, intake, triage, and advisory publication.','process','Supply Chain',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-SC-004', ARRAY['Manufacturer'], ARRAY['IT','OT','Cloud','Edge','IIoT'], ARRAY['Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-SC-004','advisory_sla_days','Days to publish security advisory after fix/mitigation', '30'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SC-004','IEC 62443-4-1:2018','SR 10 Vulnerability management','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SC-004','ISO/IEC 27002:2022','A.5.14','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-SC-004','Is a public CVD/PSIRT process documented and active?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-SD-001','Apply threat modeling to IACS products.','Perform and maintain threat models for products and features, covering misuse of OT protocols and interfaces.','process','Secure Development',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-SD-001', ARRAY['Manufacturer','SoftwareVendor'], ARRAY['IT','OT','Edge','IIoT'], ARRAY['Design','Development'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SD-001','IEC 62443-4-1:2018','Practice 1â€”Security Requirements','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SD-001','ISO/IEC 27002:2022','A.8.3','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-SD-001','Are threat models maintained for releases and reviewed?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-SD-002','Integrate SAST/DAST into CI/CD.','Enforce automated static and dynamic security testing in CI/CD with policy gates for severity and coverage.','process','Secure Development',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-SD-002', ARRAY['Manufacturer','SoftwareVendor'], ARRAY['IT','Cloud','Edge','IIoT'], ARRAY['Development','Integration'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SD-002','IEC 62443-4-1:2018','Practice 6â€”Verification and testing','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SD-002','ISO/IEC 27002:2022','A.8.29','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-SD-002','Do pipelines enforce SAST/DAST gates before release?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-SD-003','Publish SBOM per release.','Generate and publish SBOM for every product release with component hashes and licenses.','process','Secure Development',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-SD-003', ARRAY['Manufacturer','SoftwareVendor'], ARRAY['IT','OT','Cloud','Edge','IIoT'], ARRAY['Integration','Operation'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-SD-003','sbom_required','SBOM required per release', 'true'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SD-003','CRA:2024','Annex I','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SD-003','IEC 62443-4-1:2018','Practice 5â€”Secure build','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-SD-003','Is SBOM generated and published for each release?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-SD-004','Provide VEX for known vulnerabilities.','Publish VEX or equivalent statements to communicate exploitability and mitigations for known component CVEs.','process','Secure Development',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-SD-004', ARRAY['Manufacturer','SoftwareVendor'], ARRAY['IT','OT','Cloud','Edge','IIoT'], ARRAY['Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SD-004','CRA:2024','Annex Iâ€”Vulnerability handling','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-SD-004','Are VEX statements issued for relevant CVEs?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-SD-005','Implement secure boot and signed firmware.','Enforce cryptographic signature verification for firmware and a chain of trust from bootloader to application.','technical','Secure Development',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-SD-005', ARRAY['Manufacturer'], ARRAY['Edge','IIoT','OT'], ARRAY['Design','Development','Integration','Operation'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_param(canonical_id,name,description,default_value) VALUES ('LB-SD-005','signature_algorithm','Approved signature algorithm family', '"Ed25519/RSASSA-PSS"'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SD-005','IEC 62443-4-2:2019','CR 1.4','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SD-005','ISO/IEC 27002:2022','A.8.6','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-SD-005','Is firmware signature verification enforced at boot?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-PRIV-001','Assess privacy risks in OT processing.','Perform Data Protection Impact Assessment (DPIA) where OT systems process personal data or monitoring of operators.','process','Privacy',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-PRIV-001', ARRAY['AssetOwner','ServiceProvider'], ARRAY['OT','IT'], ARRAY['Design','Operation','Maintenance'], NULL, '{"personal_data": true, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-PRIV-001','GDPR:2016','Art.35','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-PRIV-001','ISO/IEC 27002:2022','A.5.34','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-PRIV-001','Has a DPIA been conducted for OT processing of personal data?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-PRIV-002','Maintain records and processor agreements.','Maintain records of processing activities (ROPA) and data processing agreements with OT service providers.','process','Privacy',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-PRIV-002', ARRAY['AssetOwner'], ARRAY['OT','IT','Cloud'], ARRAY['Operation','Maintenance'], NULL, '{"personal_data": true, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-PRIV-002','GDPR:2016','Art.30','equivalent');
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-PRIV-002','ISO/IEC 27002:2022','A.5.32','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-PRIV-002','Are ROPA and DPAs in place for OT-related processing?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-SAF-001','Integrate safety and security engineering.','Conduct safetyâ€“security co-engineering reviews to ensure security measures do not degrade safety functions and vice versa.','process','Safety',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-SAF-001', ARRAY['AssetOwner','SystemIntegrator','Manufacturer'], ARRAY['OT'], ARRAY['Design','Integration','Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SAF-001','IEC 62443-3-3:2013','SR 7.5','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-SAF-001','Are co-engineering reviews documented with actions and approvals?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-SAF-002','Define safe-state criteria in IR.','Define and validate safe-state criteria and interlocks in incident response playbooks for OT.','process','Safety',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-SAF-002', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-SAF-002','IEC 62443-3-3:2013','SR 7.1','supports');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-SAF-002','Do playbooks include tested safe-state actions and interlocks?','yes/no', NULL, NULL);
INSERT INTO control(canonical_id,objective,statement,type,risk_theme,criticality) VALUES ('LB-PHYS-001','Control physical access to OT areas.','Restrict and monitor physical access to OT zones and protect cabinets, panels, and field devices against unauthorized access.','technical','Physical',3) ON CONFLICT (canonical_id) DO UPDATE SET objective=EXCLUDED.objective, statement=EXCLUDED.statement, type=EXCLUDED.type, risk_theme=EXCLUDED.risk_theme, criticality=EXCLUDED.criticality;
INSERT INTO control_applicability(canonical_id,roles,env,lifecycle,min_security_level,conditions) VALUES ('LB-PHYS-001', ARRAY['AssetOwner'], ARRAY['OT'], ARRAY['Operation','Maintenance'], NULL, '{"personal_data": false, "safety_critical": true}'::jsonb);
INSERT INTO control_mapping(canonical_id,framework_code,section_path,relation) VALUES ('LB-PHYS-001','ISO/IEC 27002:2022','A.7.1','equivalent');
INSERT INTO checklist_item(canonical_id,question,answer_type,guidance,evidence_type) VALUES ('LB-PHYS-001','Are OT areas controlled with access lists and monitoring?','yes/no', NULL, NULL);

-- Profiles

INSERT INTO profile(name,version,description,rules) VALUES ('OT Asset Owner â€” SL2 Operations','1.0.0','Operational baseline for OT Asset Owners at IEC 62443 SL2 with GDPR/NIS2 overlays where applicable.', '{"scope": {"role": ["AssetOwner"], "env": ["OT"], "lifecycle": ["Operation", "Maintenance"]}, "targets": {"sl": 2, "jurisdiction": "EU", "essential_service": true}, "include_domains": ["NW", "LM", "IR", "BC", "PM", "AC"], "conditions": {"personal_data": true, "safety_critical": true}, "scoring": {"scheme": "weighted", "weights_by_domain": {"NW": 1.2, "PM": 1.2, "LM": 1.1, "IR": 1.1, "AC": 1.0, "BC": 1.0}, "pass_threshold": 0.8, "partial_weight": 0.5, "na_policy": "exclude"}, "language": "it"}'::jsonb) ON CONFLICT (name) DO UPDATE SET version=EXCLUDED.version, description=EXCLUDED.description, rules=EXCLUDED.rules;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-AC-001', TRUE, '{"mfa_required": true, "session_recording_required": true}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-AC-002', TRUE, '{"entitlement_review_days": 90}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-AC-003', TRUE, '{"pam_required": true}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-AC-004', TRUE, '{"secret_rotation_days": 60}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-AC-005', FALSE, '{"session_timeout_minutes": 15}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-NW-001', TRUE, '{"rule_review_days": 90}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-NW-002', TRUE, NULL FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-NW-003', TRUE, '{"ot_protocols_allowlisted": ["Modbus", "Profinet", "DNP3"]}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-NW-004', FALSE, '{"unidirectional_required": true}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-NW-005', TRUE, '{"recertification_days": 180}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-PM-001', TRUE, '{"scan_frequency_days": 30}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-PM-002', TRUE, '{"patch_window_days": 30}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-PM-003', TRUE, '{"unpatchable_register": true}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-PM-004', FALSE, '{"advisory_review_days": 7}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-LM-001', TRUE, '{"log_retention_days": 180}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-LM-002', TRUE, '{"ntp_stratum_max": 3}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-LM-003', TRUE, '{"ids_enabled": true}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-LM-004', TRUE, '{"writable_window_hours": 0}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-IR-001', TRUE, '{"rto_hours": 4}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-IR-002', TRUE, '{"session_record_retention_days": 90}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-IR-003', FALSE, '{"exercise_frequency_days": 180}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-BC-001', TRUE, '{"backup_frequency_days": 7}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-BC-002', TRUE, '{"restore_test_frequency_days": 90}'::jsonb FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-BC-003', TRUE, NULL FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-PRIV-001', TRUE, NULL FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-PRIV-002', TRUE, NULL FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-SAF-001', TRUE, NULL FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-SAF-002', TRUE, NULL FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-PHYS-001', TRUE, NULL FROM profile WHERE name='OT Asset Owner â€” SL2 Operations' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile(name,version,description,rules) VALUES ('Manufacturer â€” CRA/62443 SDLC','1.0.0','Baseline for product manufacturers aligning with CRA and IEC 62443-4-1/-4-2 secure development and vulnerability handling.', '{"scope": {"role": ["Manufacturer"], "env": ["IT", "OT", "Edge", "IIoT"], "lifecycle": ["Design", "Development", "Integration", "Operation", "Maintenance"]}, "targets": {"jurisdiction": "EU"}, "include_domains": ["Secure Development", "Supply Chain", "Vulnerability", "Incident Response"], "scoring": {"scheme": "weighted", "weights_by_domain": {"Secure Development": 1.4, "Supply Chain": 1.2, "Vulnerability": 1.1, "Incident Response": 1.0}, "pass_threshold": 0.8, "partial_weight": 0.5, "na_policy": "exclude"}, "language": "en"}'::jsonb) ON CONFLICT (name) DO UPDATE SET version=EXCLUDED.version, description=EXCLUDED.description, rules=EXCLUDED.rules;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-SD-001', TRUE, NULL FROM profile WHERE name='Manufacturer â€” CRA/62443 SDLC' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-SD-002', TRUE, NULL FROM profile WHERE name='Manufacturer â€” CRA/62443 SDLC' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-SD-003', TRUE, '{"sbom_required": true}'::jsonb FROM profile WHERE name='Manufacturer â€” CRA/62443 SDLC' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-SD-004', TRUE, NULL FROM profile WHERE name='Manufacturer â€” CRA/62443 SDLC' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-SD-005', TRUE, '{"signature_algorithm": "Ed25519/RSASSA-PSS"}'::jsonb FROM profile WHERE name='Manufacturer â€” CRA/62443 SDLC' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-SC-001', TRUE, NULL FROM profile WHERE name='Manufacturer â€” CRA/62443 SDLC' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-SC-003', TRUE, '{"sbom_format": "CycloneDX"}'::jsonb FROM profile WHERE name='Manufacturer â€” CRA/62443 SDLC' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-SC-004', TRUE, '{"advisory_sla_days": 30}'::jsonb FROM profile WHERE name='Manufacturer â€” CRA/62443 SDLC' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-PM-001', TRUE, '{"scan_frequency_days": 30}'::jsonb FROM profile WHERE name='Manufacturer â€” CRA/62443 SDLC' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-PM-004', TRUE, '{"advisory_review_days": 7}'::jsonb FROM profile WHERE name='Manufacturer â€” CRA/62443 SDLC' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;
INSERT INTO profile_control(profile_id,canonical_id,required,param_values) SELECT profile_id, 'LB-IR-001', FALSE, '{"rto_hours": 8}'::jsonb FROM profile WHERE name='Manufacturer â€” CRA/62443 SDLC' ON CONFLICT (profile_id, canonical_id) DO UPDATE SET required=EXCLUDED.required, param_values=EXCLUDED.param_values;

COMMIT;